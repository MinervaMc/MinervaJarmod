--- a/net/minecraft/command/impl/TitleCommand.java
+++ b/net/minecraft/command/impl/TitleCommand.java
@@ -10,8 +10,10 @@
 import net.minecraft.command.arguments.ComponentArgument;
 import net.minecraft.command.arguments.EntityArgument;
 import net.minecraft.entity.player.ServerPlayerEntity;
+import net.minecraft.network.play.server.SPlayerListHeaderFooterPacket;
 import net.minecraft.network.play.server.STitlePacket;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.StringTextComponent;
 import net.minecraft.util.text.TextComponentUtils;
 import net.minecraft.util.text.TranslationTextComponent;
 
@@ -19,28 +21,20 @@
 {
     public static void register(CommandDispatcher<CommandSource> dispatcher)
     {
-        dispatcher.register(Commands.literal("title").requires((p_198847_0_) ->
-        {
-            return p_198847_0_.hasPermissionLevel(2);
-        }).then(Commands.argument("targets", EntityArgument.players()).then(Commands.literal("clear").executes((p_198838_0_) ->
-        {
-            return clear(p_198838_0_.getSource(), EntityArgument.getPlayers(p_198838_0_, "targets"));
-        })).then(Commands.literal("reset").executes((p_198841_0_) ->
-        {
-            return reset(p_198841_0_.getSource(), EntityArgument.getPlayers(p_198841_0_, "targets"));
-        })).then(Commands.literal("title").then(Commands.argument("title", ComponentArgument.component()).executes((p_198837_0_) ->
-        {
-            return show(p_198837_0_.getSource(), EntityArgument.getPlayers(p_198837_0_, "targets"), ComponentArgument.getComponent(p_198837_0_, "title"), STitlePacket.Type.TITLE);
-        }))).then(Commands.literal("subtitle").then(Commands.argument("title", ComponentArgument.component()).executes((p_198842_0_) ->
-        {
-            return show(p_198842_0_.getSource(), EntityArgument.getPlayers(p_198842_0_, "targets"), ComponentArgument.getComponent(p_198842_0_, "title"), STitlePacket.Type.SUBTITLE);
-        }))).then(Commands.literal("actionbar").then(Commands.argument("title", ComponentArgument.component()).executes((p_198836_0_) ->
-        {
-            return show(p_198836_0_.getSource(), EntityArgument.getPlayers(p_198836_0_, "targets"), ComponentArgument.getComponent(p_198836_0_, "title"), STitlePacket.Type.ACTIONBAR);
-        }))).then(Commands.literal("times").then(Commands.argument("fadeIn", IntegerArgumentType.integer(0)).then(Commands.argument("stay", IntegerArgumentType.integer(0)).then(Commands.argument("fadeOut", IntegerArgumentType.integer(0)).executes((p_198843_0_) ->
-        {
-            return setTimes(p_198843_0_.getSource(), EntityArgument.getPlayers(p_198843_0_, "targets"), IntegerArgumentType.getInteger(p_198843_0_, "fadeIn"), IntegerArgumentType.getInteger(p_198843_0_, "stay"), IntegerArgumentType.getInteger(p_198843_0_, "fadeOut"));
-        })))))));
+        dispatcher.register(Commands.literal("title").requires((source) -> source.hasPermissionLevel(2)).then(
+                Commands.argument("targets", EntityArgument.players())
+                        .then(Commands.literal("clear").executes((source) -> clear(source.getSource(), EntityArgument.getPlayers(source, "targets"))))
+                        .then(Commands.literal("reset").executes((source) -> reset(source.getSource(), EntityArgument.getPlayers(source, "targets"))))
+                        .then(Commands.literal("title").then(Commands.argument("title", ComponentArgument.component()).executes((source) -> show(source.getSource(), EntityArgument.getPlayers(source, "targets"), ComponentArgument.getComponent(source, "title"), STitlePacket.Type.TITLE))))
+                        .then(Commands.literal("subtitle").then(Commands.argument("title", ComponentArgument.component()).executes((source) -> show(source.getSource(), EntityArgument.getPlayers(source, "targets"), ComponentArgument.getComponent(source, "title"), STitlePacket.Type.SUBTITLE))))
+                        .then(Commands.literal("actionbar").then(Commands.argument("title", ComponentArgument.component()).executes((source) -> show(source.getSource(), EntityArgument.getPlayers(source, "targets"), ComponentArgument.getComponent(source, "title"), STitlePacket.Type.ACTIONBAR))))
+                        .then(Commands.literal("footer").then(Commands.argument("footer", ComponentArgument.component()).executes((source) -> tabList(source.getSource(), EntityArgument.getPlayers(source, "targets"), ComponentArgument.getComponent(source, "footer")))))
+                        .then(Commands.literal("times")
+                              .then(Commands.argument("fadeIn", IntegerArgumentType.integer(0))
+                                    .then(Commands.argument("stay", IntegerArgumentType.integer(0))
+                                          .then(Commands.argument("fadeOut", IntegerArgumentType.integer(0))
+                                                .executes((source) -> setTimes(source.getSource(), EntityArgument.getPlayers(source, "targets"), IntegerArgumentType.getInteger(source, "fadeIn"), IntegerArgumentType.getInteger(source, "stay"), IntegerArgumentType.getInteger(source, "fadeOut")))))))
+        ));
     }
 
     private static int clear(CommandSource source, Collection<ServerPlayerEntity> targets)
@@ -124,4 +118,38 @@
 
         return target.size();
     }
+
+    private static int
+    tabList(
+        CommandSource source,
+        Collection<ServerPlayerEntity> players,
+        ITextComponent footer
+    ) throws CommandSyntaxException
+    {
+        ITextComponent EMPTY = new StringTextComponent("");
+
+        for (ServerPlayerEntity player : players)
+        {
+            player.connection.sendPacket(new SPlayerListHeaderFooterPacket(EMPTY,
+                                                                           TextComponentUtils.updateForEntity(source,
+                                                                                                              footer,
+                                                                                                              player, 0)));
+        }
+
+        if (players.size() == 1)
+        {
+            source.sendFeedback(new TranslationTextComponent("commands.title.show.title.single",
+                                                             players.iterator().next().getDisplayName()),
+                                true);
+        }
+        else
+        {
+            source.sendFeedback(new TranslationTextComponent("commands.title.show.title.multiple",
+                                                             players.size()),
+                                true);
+        }
+
+        return players.size();
+    }
 }
+ 
